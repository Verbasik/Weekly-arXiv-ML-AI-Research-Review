#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Google ADK –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from google.adk import Agent, Runner
from google.adk.sessions import InMemorySessionService
from google.genai.types import Content, Part
from loguru import logger

async def test_basic_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        agent = Agent(
            model="gemini-2.0-flash",
            name="test_agent",
            instruction="–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        )
        
        # –°–æ–∑–¥–∞–µ–º session service
        session_service = InMemorySessionService()
        
        # –°–æ–∑–¥–∞–µ–º runner
        runner = Runner(
            app_name="test_app",
            agent=agent,
            session_service=session_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = await session_service.create_session(
            state={}, 
            app_name="test_app", 
            user_id="test_user"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Content(
            role='user', 
            parts=[Part(text="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")]
        )
        
        print(f"üìù –ó–∞–ø—Ä–æ—Å: –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        events = runner.run_async(
            user_id=session.user_id,
            session_id=session.id,
            new_message=message
        )
        
        result = ""
        async for event in events:
            if hasattr(event, 'content') and event.content:
                for part in event.content.parts:
                    if part.text:
                        result += part.text
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_git_analysis_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Git –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ Git...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Git
        agent = Agent(
            model="gemini-2.0-flash",
            name="git_analyzer",
            instruction="""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤.
            
            –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
            1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö
            2. –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤
            3. –°–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É Conventional Commits
            
            –¢–∏–ø—ã –∫–æ–º–º–∏—Ç–æ–≤:
            - feat: –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            - fix: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
            - docs: –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            - style: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
            - refactor: —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
            - test: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
            - chore: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            """
        )
        
        # –°–æ–∑–¥–∞–µ–º session service
        session_service = InMemorySessionService()
        
        # –°–æ–∑–¥–∞–µ–º runner
        runner = Runner(
            app_name="git_analysis_app",
            agent=agent,
            session_service=session_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = await session_service.create_session(
            state={}, 
            app_name="git_analysis_app", 
            user_id="test_user"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        test_changes = """
        –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ:
        - –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: src/utils/helper.py
        - –ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: src/main.py (–¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è validate_input)
        - –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: requirements.txt (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å requests)
        
        –°–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Conventional Commits.
        """
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Content(
            role='user', 
            parts=[Part(text=test_changes)]
        )
        
        print(f"üìù –ó–∞–ø—Ä–æ—Å: {test_changes}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        events = runner.run_async(
            user_id=session.user_id,
            session_id=session.id,
            new_message=message
        )
        
        result = ""
        async for event in events:
            if hasattr(event, 'content') and event.content:
                for part in event.content.parts:
                    if part.text:
                        result += part.text
        
        print(f"ü§ñ –ê–Ω–∞–ª–∏–∑: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_code_review_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è code review"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ code review...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è code review
        agent = Agent(
            model="gemini-2.0-flash",
            name="code_reviewer",
            instruction="""
            –¢—ã - –æ–ø—ã—Ç–Ω—ã–π code reviewer. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –∏ –¥–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.
            
            –ü—Ä–æ–≤–µ—Ä—è–π:
            1. –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
            2. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –±–∞–≥–∏
            3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            4. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            5. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º
            
            –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
            """
        )
        
        # –°–æ–∑–¥–∞–µ–º session service
        session_service = InMemorySessionService()
        
        # –°–æ–∑–¥–∞–µ–º runner
        runner = Runner(
            app_name="code_review_app",
            agent=agent,
            session_service=session_service
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = await session_service.create_session(
            state={}, 
            app_name="code_review_app", 
            user_id="test_user"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º code review
        test_code = """
        def calculate_fibonacci(n):
            if n <= 1:
                return n
            return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.
        """
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Content(
            role='user', 
            parts=[Part(text=test_code)]
        )
        
        print(f"üìù –ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {test_code}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        events = runner.run_async(
            user_id=session.user_id,
            session_id=session.id,
            new_message=message
        )
        
        result = ""
        async for event in events:
            if hasattr(event, 'content') and event.content:
                for part in event.content.parts:
                    if part.text:
                        result += part.text
        
        print(f"ü§ñ Code Review: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google ADK –∞–≥–µ–Ω—Ç–æ–≤...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_basic_agent,
        test_git_analysis_agent,
        test_code_review_agent
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    test_names = ["–ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç", "Git –∞–Ω–∞–ª–∏–∑", "Code Review"]
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{i+1}. {name}: {status}")
    
    success_count = sum(results)
    total_count = len(results)
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! Google ADK –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏.")

if __name__ == "__main__":
    asyncio.run(main()) 