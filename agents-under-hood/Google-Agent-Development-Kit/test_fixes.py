#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—à–∏–±–æ–∫
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from utils.file_utils import ChangeDetector
from utils.git_utils import GitManager
from git_workflow_agent.config import GIT_CONFIG

async def test_git_status_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ get_changed_files"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤ get_changed_files...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º GitManager –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        current_dir = Path.cwd()
        git_manager = GitManager(str(current_dir))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å Git
        status = git_manager.get_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å Git –ø–æ–ª—É—á–µ–Ω: {status['is_repo']}")
        
        # –°–æ–∑–¥–∞–µ–º ChangeDetector
        change_detector = ChangeDetector(GIT_CONFIG)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_changed_files
        changes = change_detector.get_changed_files(str(current_dir), git_manager)
        print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {len(changes)} —Ñ–∞–π–ª–æ–≤")
        
        for change in changes:
            print(f"  - {change.file_path} ({change.change_type})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_date_parsing_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç"""
    print("\nüìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º GitManager –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        current_dir = Path.cwd()
        git_manager = GitManager(str(current_dir))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
        commits = git_manager.get_recent_commits(5)
        print(f"‚úÖ –ö–æ–º–º–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(commits)}")
        
        for commit in commits:
            print(f"  - {commit.hash[:8]}: {commit.message[:50]}... ({commit.date})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_analysis_summary():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º ChangeDetector
        change_detector = ChangeDetector(GIT_CONFIG)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        from utils.file_utils import FileChange
        from datetime import datetime
        
        test_changes = [
            FileChange(
                file_path="test1.py",
                change_type="modified",
                language="Python",
                file_size=1024
            ),
            FileChange(
                file_path="test2.js",
                change_type="added",
                language="JavaScript",
                file_size=512
            ),
            FileChange(
                file_path="test3.txt",
                change_type="deleted",
                language="Text",
                file_size=256
            )
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = change_detector.create_analysis_summary(test_changes)
        print(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"  - –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {summary['total_changes']}")
        print(f"  - –ü–æ —Ç–∏–ø–∞–º: {summary['by_type']}")
        print(f"  - –ü–æ —è–∑—ã–∫–∞–º: {summary['by_language']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—à–∏–±–æ–∫...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    else:
        print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_git_status_fix,
        test_date_parsing_fix,
        test_analysis_summary
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
    
    test_names = ["Git Status Fix", "Date Parsing Fix", "Analysis Summary"]
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ –£–°–ü–ï–•" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{i+1}. {name}: {status}")
    
    success_count = sum(results)
    total_count = len(results)
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main()) 