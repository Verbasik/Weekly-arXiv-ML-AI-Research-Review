---
description:
globs:
alwaysApply: false
---
# Memory Bank Learning - Банк знаний и обучения

## Архитектурные решения

### DDD Architecture для Frontend
**Урок**: DDD архитектура эффективно работает не только для backend, но и для сложных frontend приложений.

**Применение**:
- Domain layer содержит бизнес-логику (entities, services)
- Infrastructure layer управляет внешними зависимостями (GitHub API, error handling)
- Application layer координирует взаимодействие
- Presentation layer отвечает только за UI

**Преимущества**:
- Четкое разделение ответственности
- Легкость тестирования
- Возможность переиспользования логики
- Масштабируемость кода

### Agents Domain Architecture
**Новое знание**: При добавлении новой рубрики "Agents Under Hood" была создана полная доменная архитектура:

**Структура**:
```
web/domain/agents/
├── entities/Project.js          // Доменная модель проекта
├── repositories/AgentsRepository.js  // Абстракция данных
└── services/AgentsService.js    // Бизнес-логика

web/infrastructure/data/
├── AgentsDataSource.js         // Источник данных
└── agents-index.json          // Данные проектов

web/application/
└── AgentsController.js        // Координация слоев

web/presentation/components/
└── ProjectCard.js            // UI компонент
```

**Ключевые особенности**:
- Project entity содержит rich domain logic
- AgentsService предоставляет бизнес-операции (поиск, фильтрация, рекомендации)
- ProjectCard адаптирован для agents проектов
- Повторное использование ModalWindow компонента

## Паттерны проектирования

### Component Factory Pattern
**Использование**: WeekCard и ProjectCard используют единую структуру, но с разной доменной логикой.

**Применение**:
- Базовая структура карточек остается одинаковой
- Специфическая логика инкапсулируется в entity
- Компоненты получают данные через конструктор
- События обрабатываются через custom events

### Data Source Pattern
**Реализация**: 
- GitHubDataSource для research данных
- AgentsDataSource для agents проектов
- Единый интерфейс для работы с внешними источниками

### Repository Pattern
**Эффективность**: Абстракция источников данных позволяет легко менять источники без изменения бизнес-логики.

## Предпочтения пользователя

### Архитектурные предпочтения
- **DDD Architecture**: Предпочтение четкого разделения на слои
- **Vanilla JavaScript**: Избегание frameworks для образовательных целей
- **TypeScript**: Планируется миграция, но пока используется JSDoc
- **Testing**: Признается важность, планируется добавление

### Design Предпочтения
- **Scale AI inspired дизайн**: Dark theme с профессиональным видом
- **Mobile-first**: Приоритет мобильной версии
- **Accessibility**: Внимание к доступности (WCAG guidelines)
- **Performance**: Оптимизация загрузки и рендеринга

### Content Strategy
- **Quality over quantity**: Предпочтение качественного контента
- **Practical focus**: Акцент на практических материалах
- **Weekly cadence**: Еженедельные публикации
- **Open source**: Все материалы открыты

## Технические экспертизы

### Frontend Development
- **Сильные стороны**: Архитектура, компонентный дизайн, UX
- **Подход**: Модульность, переиспользование, масштабируемость
- **Инструменты**: Vanilla JS, CSS Grid/Flexbox, GitHub Pages

### ML/AI Domain
- **Экспертиза**: Глубокие знания в области ML/AI
- **Фокус**: Исследовательские статьи, практические реализации
- **Новое направление**: Мультиагентные системы

### DevOps & Infrastructure
- **Текущий уровень**: Базовый (GitHub Pages, статический хостинг)
- **Планы**: CI/CD, testing automation, monitoring

## Anti-Patterns (что избегать)

### Архитектурные анти-паттерны
- **God Objects**: Избегать монолитных контроллеров
- **Tight Coupling**: Слои должны быть слабо связаны
- **No Abstraction**: Всегда абстрагировать внешние зависимости

### Code Quality
- **No Documentation**: Всегда документировать сложную логику
- **Hard-coded Values**: Использовать конфигурационные объекты
- **No Error Handling**: Каждая операция должна обрабатывать ошибки

### UX Anti-Patterns
- **Loading без feedback**: Всегда показывать состояние загрузки
- **No Progressive Enhancement**: Сайт должен работать без JS
- **Poor Mobile Experience**: Mobile-first подход

## Процессы разработки

### Planning & Design
1. **Domain Analysis**: Всегда начинать с анализа домена
2. **Architecture Planning**: Проектировать архитектуру перед кодом
3. **Component Design**: Продумывать переиспользование компонентов

### Implementation
1. **Layer by Layer**: Реализовывать по слоям (Domain → Infrastructure → Application → Presentation)
2. **Test-Driven**: Планировать тесты (пока не реализовано)
3. **Progressive Enhancement**: Базовая функциональность без JS

### Deployment
1. **Static First**: Статический сайт как приоритет
2. **GitHub Integration**: Использование GitHub для данных и хостинга
3. **Performance Check**: Контроль производительности

## Monitoring и Analytics

### Текущее состояние
- **Мониторинг**: Отсутствует (технический долг)
- **Analytics**: Не настроена
- **Error Tracking**: Только клиентский ErrorHandler

### Планы
- Google Analytics или альтернатива
- Performance monitoring
- Error tracking service

## Security Considerations

### Текущие меры
- **CSP Headers**: Через GitHub Pages
- **HTTPS**: Автоматически через GitHub Pages
- **Input Validation**: На клиентской стороне

### Возможные улучшения
- Rate limiting для API calls
- Content validation
- XSS protection enhancement

## Scalability Strategy

### Текущие ограничения
- Статический JSON для данных
- Клиентский рендеринг всех данных
- Нет кэширования

### Планы масштабирования
- **Phase 1**: Оптимизация текущего решения
- **Phase 2**: API для данных, server-side rendering
- **Phase 3**: CDN, distributed architecture

## Communication Patterns

### User Interaction
- **Custom Events**: Для связи между компонентами
- **Modal System**: Для детального просмотра контента
- **Progressive Disclosure**: Постепенное раскрытие информации

### Error Communication
- **Graceful Degradation**: Сайт работает при ошибках
- **User-Friendly Messages**: Понятные сообщения об ошибках
- **Retry Mechanisms**: Автоматические повторы для network requests

---

## Ключевые инсайты

1. **DDD для Frontend работает**: Четкое разделение позволяет легко добавлять новые функции
2. **Vanilla JS достаточно**: Для образовательных проектов framework не обязателен
3. **GitHub как backend**: Эффективное использование GitHub для данных и хостинга
4. **Mobile-first критично**: Большинство пользователей будут с мобильных устройств
5. **Quality over quantity**: Лучше меньше, но качественного контента

## Следующие итерации

### Приоритеты обучения
1. **Testing Strategies**: Изучить подходы к тестированию SPA
2. **Performance Optimization**: Глубже в оптимизацию производительности
3. **Accessibility**: Углубить знания в области доступности
4. **TypeScript Migration**: Подготовка к постепенной миграции

### Области для экспериментов
1. **PWA Features**: Service Workers, offline support
2. **Advanced UI Patterns**: Micro-interactions, animations
3. **Data Visualization**: Для отображения статистики и метрик
4. **AI Integration**: Возможная интеграция AI для рекомендаций

---

**Последнее обновление**: При создании agents architecture
**Следующее обновление**: После добавления тестирования
