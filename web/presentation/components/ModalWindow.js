import { ErrorHandler, createErrorUI } from '../../infrastructure/error/ErrorHandler.js';

/**
 * Modal Window Component - Presentation Layer
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å markdown –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
 */
export class ModalWindow {
    constructor(modalElement, researchService) {
        this.modal = modalElement;
        this.researchService = researchService;
        this.markdownContent = modalElement.querySelector('#markdown-content');
        this.loader = modalElement.querySelector('.loader');
        this.closeButton = modalElement.querySelector('.close-modal');
        
        this._initializeEventListeners();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    _initializeEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ
        if (this.closeButton) {
            this.closeButton.addEventListener('click', () => this.close());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.modal.addEventListener('click', (event) => {
            if (event.target === this.modal) {
                this.close();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape' && this.isOpen()) {
                this.close();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è
        document.addEventListener('openReview', (event) => {
            const { year, weekId, title } = event.detail;
            this.open(year, weekId, title);
        });
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    async open(year, weekId, title) {
        if (!this.modal || !this.markdownContent) return;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        this._setTitle(title);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const success = await this._loadMarkdown(year, weekId);

        if (success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º URL —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            this._updateUrl(year, weekId);
        }
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    close() {
        if (!this.modal) return;

        this.modal.style.display = 'none';
        document.body.style.overflow = '';
        
        if (this.markdownContent) {
            this.markdownContent.innerHTML = '';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º URL
        this._resetUrl();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
     */
    isOpen() {
        return this.modal && this.modal.style.display === 'flex';
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç markdown –∫–æ–Ω—Ç–µ–Ω—Ç
     */
    async _loadMarkdown(year, weekId) {
        if (!this.markdownContent || !this.loader) {
            console.error("Markdown content area or loader not found.");
            return false;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.loader.style.display = 'block';
        this.markdownContent.innerHTML = `
            <div class="loading-content">
                <div class="loader"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—å–∏ "${year}/${weekId}"...</p>
                <p class="loading-tip">üí° –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</p>
            </div>
        `;

        try {
            // –ü–æ–ª—É—á–∞–µ–º markdown —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            const markdown = await this.researchService.getWeekMarkdown(year, weekId);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown
            const html = await this._processMarkdown(markdown);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            this.markdownContent.innerHTML = html;
            
            // –†–µ–Ω–¥–µ—Ä–∏–º MathJax –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            await this._renderMathJax();
            
            this.loader.style.display = 'none';
            return true;

        } catch (error) {
            console.error('Error loading markdown:', error);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
            const errorInfo = ErrorHandler.classifyError(error);
            
            // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π error UI
            const errorUI = createErrorUI(
                errorInfo.type,
                `—Å—Ç–∞—Ç—å—è "${year}/${weekId}"`,
                () => {
                    // Retry callback
                    this._loadMarkdown(year, weekId);
                },
                () => {
                    // Back callback - –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    this.close();
                }
            );
            
            this.markdownContent.innerHTML = '';
            this.markdownContent.appendChild(errorUI);
            this.loader.style.display = 'none';
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if (errorInfo.type === 'offline') {
                const handleOnline = () => {
                    this._loadMarkdown(year, weekId);
                    window.removeEventListener('online', handleOnline);
                };
                window.addEventListener('online', handleOnline);
            }
            
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç markdown –≤ HTML
     */
    async _processMarkdown(markdown) {
        // 1. –ò–∑–æ–ª—è—Ü–∏—è —Ñ–æ—Ä–º—É–ª MathJax
        const mathPlaceholders = {};
        let placeholderId = 0;
        const mathRegex = /(\$\$[\s\S]*?\$\$|\\\[[\s\S]*?\\\]|\$(?:[^$\\]|\\.)*?\$|\\\((?:[^)\\]|\\.)*?\\\))/g;
        
        const processedMarkdown = markdown.replace(mathRegex, (match) => {
            const id = `mathjax-placeholder-${placeholderId++}`;
            mathPlaceholders[id] = match;
            return `<span id="${id}" style="display: none;"></span>`;
        });

        // 2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Markdown –≤ HTML
        if (typeof marked === 'undefined') {
            throw new Error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Marked.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
        }
        
        let html;
        try {
            html = marked.parse(processedMarkdown);
        } catch (markdownError) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Markdown: ${markdownError.message}`);
        }

        // 3. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOM
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = html;

        // 4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
        Object.keys(mathPlaceholders).forEach(id => {
            const placeholderElement = tempDiv.querySelector(`#${id}`);
            if (placeholderElement) {
                placeholderElement.replaceWith(document.createTextNode(mathPlaceholders[id]));
            }
        });

        return tempDiv.innerHTML;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç MathJax —Ñ–æ—Ä–º—É–ª—ã
     */
    async _renderMathJax() {
        try {
            if (typeof MathJax !== 'undefined' && MathJax.typesetPromise) {
                MathJax.texReset?.();
                MathJax.typesetClear?.([this.markdownContent]);
                await MathJax.typesetPromise([this.markdownContent]);
            } else {
                console.warn("MathJax 3 not found or not configured.");
            }
        } catch (mathJaxError) {
            console.warn("MathJax rendering failed:", mathJaxError);
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ç—å—è –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±–µ–∑ —Ñ–æ—Ä–º—É–ª
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
     */
    _setTitle(title) {
        const modalContentDiv = this.modal.querySelector('.modal-content');
        let titleElement = modalContentDiv?.querySelector('h2.modal-title');
        
        if (!titleElement) {
            titleElement = document.createElement('h2');
            titleElement.className = 'modal-title';
            titleElement.style.marginTop = '0';
            titleElement.style.marginBottom = '1rem';
            modalContentDiv?.insertBefore(titleElement, this.markdownContent);
        }
        
        titleElement.textContent = title;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç URL —Å —Ö–µ—à–µ–º
     */
    _updateUrl(year, weekId) {
        window.location.hash = `#${year}/${weekId}`;
    }

    /**
     * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç URL
     */
    _resetUrl() {
        history.pushState("", document.title, window.location.pathname + window.location.search);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL —Ö–µ—à –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
     */
    checkUrlHash() {
        const hash = window.location.hash;
        if (hash && hash.startsWith('#') && hash.includes('/')) {
            const parts = hash.substring(1).split('/');
            if (parts.length === 2 && parts[0] && parts[1]) {
                const year = parts[0];
                const weekId = parts[1];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ —É–∂–µ —ç—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const currentModalTitle = this.modal?.querySelector('.modal-content h2.modal-title');
                const expectedTitle = `Review ${year}/${weekId}`;
                
                if (!this.isOpen() || !currentModalTitle || !currentModalTitle.textContent.includes(`${year}/${weekId}`)) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
                    const card = document.querySelector(`.week-card[data-year="${year}"][data-week="${weekId}"]`);
                    const title = card?.querySelector('.week-card-title')?.textContent || expectedTitle;
                    
                    this.open(year, weekId, title);
                }
            } else {
                // –•–µ—à –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
                if (this.isOpen()) {
                    this.close();
                }
            }
        } else {
            // –•–µ—à –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç '/', –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            if (this.isOpen()) {
                this.close();
            }
        }
    }
} 