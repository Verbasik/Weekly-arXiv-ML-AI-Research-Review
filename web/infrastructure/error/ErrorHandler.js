/**
 * Error Handler - Infrastructure Layer
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞
const RETRY_CONFIG = {
    maxRetries: 3,
    baseDelay: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
    maxDelay: 10000, // 10 —Å–µ–∫—É–Ω–¥
    backoffFactor: 2
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è error handling
export const ErrorHandler = {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
    isOnline: () => navigator.onLine,
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
    classifyError: (error, response = null) => {
        if (!navigator.onLine) {
            return { type: 'offline', severity: 'high', retryable: true };
        }
        
        if (response) {
            if (response.status === 404) {
                return { type: 'not_found', severity: 'medium', retryable: false };
            }
            if (response.status >= 500) {
                return { type: 'server_error', severity: 'high', retryable: true };
            }
            if (response.status === 403) {
                return { type: 'forbidden', severity: 'medium', retryable: false };
            }
            if (response.status >= 400) {
                return { type: 'client_error', severity: 'medium', retryable: false };
            }
        }
        
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            return { type: 'network', severity: 'high', retryable: true };
        }
        
        return { type: 'unknown', severity: 'medium', retryable: true };
    },
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    getUserMessage: (errorType, context = '') => {
        const messages = {
            offline: {
                title: 'üåê –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
                message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                action: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É'
            },
            not_found: {
                title: 'üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                message: `${context} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏–ª–∏ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω.`,
                action: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É'
            },
            server_error: {
                title: '‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
                message: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.',
                action: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É'
            },
            forbidden: {
                title: 'üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω',
                message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.',
                action: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É'
            },
            client_error: {
                title: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞',
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.',
                action: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É'
            },
            network: {
                title: 'üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é',
                message: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.',
                action: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É'
            },
            unknown: {
                title: '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
                message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
                action: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É'
            }
        };
        
        return messages[errorType] || messages.unknown;
    },
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
    delay: (attempt) => {
        const delay = Math.min(
            RETRY_CONFIG.baseDelay * Math.pow(RETRY_CONFIG.backoffFactor, attempt),
            RETRY_CONFIG.maxDelay
        );
        return new Promise(resolve => setTimeout(resolve, delay));
    }
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è fetch —Å retry
export async function fetchWithRetry(url, options = {}, context = '') {
    let lastError = null;
    let lastResponse = null;
    
    for (let attempt = 0; attempt <= RETRY_CONFIG.maxRetries; attempt++) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            if (!ErrorHandler.isOnline()) {
                throw new Error('No internet connection');
            }
            
            // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è timeout (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—Ç–∞—Ä—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞–º–∏)
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 —Å–µ–∫—É–Ω–¥ timeout
            
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            lastResponse = response;
            
            if (!response.ok) {
                const errorInfo = ErrorHandler.classifyError(null, response);
                
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç retry, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
                if (!errorInfo.retryable) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                if (attempt === RETRY_CONFIG.maxRetries) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                console.warn(`Attempt ${attempt + 1} failed, retrying in ${RETRY_CONFIG.baseDelay * Math.pow(RETRY_CONFIG.backoffFactor, attempt)}ms...`);
                await ErrorHandler.delay(attempt);
                continue;
            }
            
            return response;
            
        } catch (error) {
            lastError = error;
            
            // –ï—Å–ª–∏ —ç—Ç–æ AbortError (timeout), –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∫ network error
            if (error.name === 'AbortError') {
                lastError = new Error('Request timeout');
            }
            
            const errorInfo = ErrorHandler.classifyError(lastError, lastResponse);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç retry –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            if (!errorInfo.retryable || attempt === RETRY_CONFIG.maxRetries) {
                throw lastError;
            }
            
            // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            console.warn(`Attempt ${attempt + 1} failed: ${lastError.message}, retrying in ${RETRY_CONFIG.baseDelay * Math.pow(RETRY_CONFIG.backoffFactor, attempt)}ms...`);
            await ErrorHandler.delay(attempt);
        }
    }
    
    throw lastError;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ error UI
export function createErrorUI(errorType, context = '', onRetry = null, onBack = null) {
    const userMessage = ErrorHandler.getUserMessage(errorType, context);
    
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message enhanced';
    
    errorDiv.innerHTML = `
        <div class="error-header">
            <h4>${userMessage.title}</h4>
        </div>
        <div class="error-body">
            <p>${userMessage.message}</p>
            ${!ErrorHandler.isOnline() ? '<p class="offline-notice">üì° –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É...</p>' : ''}
        </div>
        <div class="error-actions">
            ${onRetry ? `<button class="gradient-button retry-button">${userMessage.action}</button>` : ''}
            ${onBack ? '<button class="gradient-button secondary back-button">‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É</button>' : ''}
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (onRetry) {
        const retryButton = errorDiv.querySelector('.retry-button');
        retryButton?.addEventListener('click', onRetry);
    }
    
    if (onBack) {
        const backButton = errorDiv.querySelector('.back-button');
        backButton?.addEventListener('click', onBack);
    }
    
    return errorDiv;
} 